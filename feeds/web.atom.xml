<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>leelongcrazy's blog - Web</title><link href="https://leelongcrazy.github.io/" rel="alternate"></link><link href="https://leelongcrazy.github.io/feeds/web.atom.xml" rel="self"></link><id>https://leelongcrazy.github.io/</id><updated>2021-03-14T18:00:00+08:00</updated><entry><title>web安全学习笔记</title><link href="https://leelongcrazy.github.io/weban-quan-xue-xi-bi-ji.html" rel="alternate"></link><published>2021-03-14T18:00:00+08:00</published><updated>2021-03-14T18:00:00+08:00</updated><author><name>leelongcrazy</name></author><id>tag:leelongcrazy.github.io,2021-03-14:/weban-quan-xue-xi-bi-ji.html</id><summary type="html">&lt;p&gt;web渗透测试学习记录&lt;/p&gt;</summary><content type="html">&lt;h4&gt;渗透测试工程师：模拟黑客角度入侵企业以达到测试企业安全防御体系的目的。&lt;/h4&gt;
&lt;h5&gt;渗透测试是通过模拟恶意黑客的攻击方法，来评估计算机网络系统安全的一种评估方法。&lt;/h5&gt;
&lt;h5&gt;渗透测试是模拟黑客攻击测试，但两者也有区别，渗透测试是“面”的测试，黑客攻击是“深度”测试。前者涉及内容更加广泛，后者讲究的是破坏性。&lt;/h5&gt;
&lt;h2&gt;常见web安全漏洞&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;SQL注入漏洞&lt;/li&gt;
&lt;li&gt;命令（代码）注入&lt;/li&gt;
&lt;li&gt;跨站脚本注入XSS（Cross Site Script Inject）&lt;/li&gt;
&lt;li&gt;客户端请求伪造（CSRF）&lt;/li&gt;
&lt;li&gt;服务端请求伪造（SSRF）&lt;/li&gt;
&lt;li&gt;任意文件上传&lt;/li&gt;
&lt;li&gt;文件包含（LFI/RFI）&lt;/li&gt;
&lt;li&gt;XML实体注入 XXE&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;SQL注入漏洞&lt;/h2&gt;
&lt;h5&gt;SQL是用于访问和处理数据库的标准的计算机语言。SQL注入，就是把SQL命令插入到web表单提交或输入域名或页面请求的查询字符串，以达到欺骗服务器执行恶意SQL命令的目的。&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;SQL注入的分类&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;报错注入&lt;/li&gt;
&lt;li&gt;union注入&lt;/li&gt;
&lt;li&gt;时间盲注&lt;/li&gt;
&lt;li&gt;布尔盲注&lt;/li&gt;
&lt;li&gt;堆叠盲注&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;常见的注入语句：&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;‘ or 1=1&lt;/span&gt;
&lt;span class="err"&gt;‘ or 1=1#&lt;/span&gt;
&lt;span class="err"&gt;‘ or 1=1- -&lt;/span&gt;
&lt;span class="err"&gt;‘ or 1=1/*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/TheKingOfDuck/fuzzDicts/master/sqlDict/sql.txt"&gt;【SQL注入字典】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twosecurity-resource.oss-cn-hangzhou.aliyuncs.com/resources/MySQL_5.1_Reference_Manual-zh-Function_and_Operator.pdf"&gt;【MySQL 5.1 中文参考手册】&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;命令注入漏洞&lt;/h2&gt;
&lt;h6&gt;通过提交恶意构造的参数，破坏命令语句结构，从而达到执行恶意命令的目的。&lt;/h6&gt;
&lt;h2&gt;XSS攻击&lt;/h2&gt;
&lt;h6&gt;全称Cross Site Scripting，跨站脚本。&lt;/h6&gt;
&lt;h6&gt;XSS攻击主要分为三类：&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;反射性XSS&lt;/li&gt;
&lt;li&gt;存储型XSS（最隐蔽的攻击类型）&lt;/li&gt;
&lt;li&gt;DOM型XSS&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;上述三种类型的XSS也可以根据输出点的不同分为三类：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输出在html属性中&lt;/li&gt;
&lt;li&gt;输出在CSS代码中&lt;/li&gt;
&lt;li&gt;输出在JavaScript中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;XSS盲注的特点：&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;通常不会立即触发；&lt;/li&gt;
&lt;li&gt;通常无任何及时响应；&lt;/li&gt;
&lt;li&gt;是否XSS注入成功未知；&lt;/li&gt;
&lt;li&gt;危险系数较高。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;XSS的防御&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;http-only设置，导致拿不到cookie&lt;/li&gt;
&lt;li&gt;对用户输入进行过滤&lt;/li&gt;
&lt;li&gt;对用户输出进行过滤&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常用的XSS语句：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;onload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;alert(1)&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
直接输出HTML
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;autofocus onfocus=alert(1)//&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
未过滤，输出在input框中
value=&amp;quot;&amp;quot;&amp;gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;onload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;alert(&amp;quot;XSS&amp;quot;)//&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
未过滤，其他属性值中
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;/&amp;quot;;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
未过滤，输出在JS变量中
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;website&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;xxxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;/&amp;quot;;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
未过滤，输出在JS变量中
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;绕过XSS过滤的方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;大小写：&lt;code&gt;&amp;lt;sCriPt&amp;gt;alert(1)&amp;lt;/sCriPt&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组合过滤:&lt;code&gt;&amp;lt;scr&amp;lt;script&amp;gt;ipt&amp;gt;alert(1)&amp;lt;/sc&amp;lt;script&amp;gt;ript&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输出在JS中：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JS单行注释：利用换行符，回车符-》&lt;code&gt;%0d, %0a&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JS多行注释：利用多行注释符，&lt;code&gt;*/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;URL编码：&lt;code&gt;encodeURIComponent("&amp;lt;svg onload=alert(1)&amp;gt;") "%3Csvg%20onload%3Dalert(1)%3E"&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XSS本地存储：&lt;code&gt;localStorage.setItem()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;XSS 攻击的要点：构造XSS payload，打破html结构，使其出错，利用错误信息进一步完善payload以达到攻击目的。&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;可能回遇到的困难：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;语句过长，输入长度受限；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有过滤机制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有Waf&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;URL Redirect URL重定向漏洞&lt;/h4&gt;
&lt;p&gt;URL跳转，URL重定向漏洞，由于目标网站未对程序跳转的URL地址及参数做合法性判断，导致应用程序直接跳转到参数中指定的URL地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;危害：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可将跳转URL地址修改为指向恶意地址，即可发起网络钓鱼、诈骗甚至窃取用户凭据等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见的应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主要是业务逻辑中需要进行跳转的地方。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;比如登录处，注册处，访问用户信息，订单信息，加入购物车，分享，收藏等处。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;// URL跳转参数&lt;/span&gt;
&lt;span class="err"&gt;redirect&lt;/span&gt;
&lt;span class="err"&gt;url&lt;/span&gt;
&lt;span class="err"&gt;redirectUrl&lt;/span&gt;
&lt;span class="err"&gt;callback&lt;/span&gt;
&lt;span class="err"&gt;return_url&lt;/span&gt;
&lt;span class="err"&gt;toUrl&lt;/span&gt;
&lt;span class="err"&gt;ReturnUrl&lt;/span&gt;
&lt;span class="err"&gt;fromUrl&lt;/span&gt;
&lt;span class="err"&gt;redUrl&lt;/span&gt;
&lt;span class="err"&gt;request&lt;/span&gt;
&lt;span class="err"&gt;redirect_to&lt;/span&gt;
&lt;span class="err"&gt;redirect_url&lt;/span&gt;
&lt;span class="err"&gt;jump&lt;/span&gt;
&lt;span class="err"&gt;jump_to&lt;/span&gt;
&lt;span class="err"&gt;target&lt;/span&gt;
&lt;span class="err"&gt;targetUrl&lt;/span&gt;
&lt;span class="err"&gt;to&lt;/span&gt;
&lt;span class="err"&gt;goto&lt;/span&gt;
&lt;span class="err"&gt;link&lt;/span&gt;
&lt;span class="err"&gt;linkto&lt;/span&gt;
&lt;span class="err"&gt;domain&lt;/span&gt;
&lt;span class="err"&gt;oauth_callback&lt;/span&gt;
&lt;span class="err"&gt;referrerdomain&lt;/span&gt;
&lt;span class="err"&gt;next&lt;/span&gt;
&lt;span class="err"&gt;service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Google serarch 大法&lt;/h3&gt;
&lt;p&gt;inurl:redirect_url intitle:登录 -"keywords" -"博客" -"wordpress" -"blog" intext:验证码&lt;/p&gt;
&lt;h2&gt;SSRF&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Server-Side Request Forgery&lt;/strong&gt;:服务器端请求伪造，攻击者构造成服务端发起请求的一个安全漏洞。
形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能，且没有对目标地址做过滤和限制。
SSRF漏洞一般位于远程图片加载与下载、图片或文章收藏功能、URL分享、通过URL在线翻译、转码等功能点处。&lt;/p&gt;
&lt;h2&gt;文件包含&lt;/h2&gt;
&lt;p&gt;程序猿通常会把可重复使用的函数写到单个文件中，在使用其它函数时，直接调用此文件，而无需再次编写，这种调用文件的过程一般称为包含；程序猿希望代码更加灵活，所以通常会将被包含的文件设置为变量，用来进行动态调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分类：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地包含&lt;/li&gt;
&lt;li&gt;远程包含&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;任意文件上传&lt;/h2&gt;
&lt;p&gt;攻击者通过上传木马文件，获得webshell，危害等级超级高，现在的入侵中上传漏洞也是常见的漏洞。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;修复方案：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对文件格式限制，只允许某些格式的文件上传；&lt;/li&gt;
&lt;li&gt;对文件格式进行校验，前端跟服务器都要进行检验，（前端校验扩展名，后端校验扩展名、content-type等）&lt;/li&gt;
&lt;li&gt;将上传目录放置到工程目录之外，当作静态资源路径，对文件的权限进行设定，禁止文件下的执行权限。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;反序列化&lt;/h2&gt;
&lt;p&gt;把磁盘或网络节点上的字节序列恢复到对象的过程称为对象的反序列化，在java中比较常见，ObjectInputStream类的readObject()方法用于反序列化。&lt;/p&gt;
&lt;h2&gt;XML实体注入&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;XXE的危害&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取任意文件&lt;/li&gt;
&lt;li&gt;执行系统命令，但需要有 expect 插件&lt;/li&gt;
&lt;li&gt;扫描网站的端口以及是否存在某些目录或文件&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 http 协议发起 SSRF 攻击
&lt;strong&gt;如何防御XXE攻击？&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用开发语言提供的禁用外部实体的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;过滤用户提交的XML数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;漏洞防御&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;没有绝对安全系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;防护的三个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从源头上解决&lt;/li&gt;
&lt;li&gt;通过过滤代码&lt;/li&gt;
&lt;li&gt;第三方的防护&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;web漏洞是渗透测试的基础&lt;/h4&gt;
&lt;h4&gt;理解漏洞原理能帮助我们更好的挖掘漏洞&lt;/h4&gt;
&lt;h4&gt;攻防是一个整体&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;渗透测试的三种类型：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;黑盒渗透测试&lt;blockquote&gt;
&lt;p&gt;测试人员没有被提供更多他要渗透目标的信息，却有责任收集有关目标网络，系统或者应用程序的信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;白盒渗透测试&lt;blockquote&gt;
&lt;p&gt;测试人员将获得有关网络，系统或应用程序的完整信息以及源代码，操作系统详细信息和其他有关信息。可以认为是模拟内部来源的攻击。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;灰盒渗透测试&lt;blockquote&gt;
&lt;p&gt;测试人员将具有网络，系统或应用程序的部分信息。可以认为是外部黑客的攻击，黑客已经非法访问组织的网络基础设施文档。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;渗透测试执行标准（Penetration Testing Execution Standard：PTES）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;前期交互: 确定项目范围，周期，采用的技术手段和工具，以及其他约束条件&lt;/li&gt;
&lt;li&gt;信息收集: 收集目标相关资产信息，包括域名，IP，邮箱，防御措施等。&lt;/li&gt;
&lt;li&gt;威胁建模: 利用已经收集的信息对目标资产进行分析，获取其可能存在的威胁，并规划攻击路径。&lt;/li&gt;
&lt;li&gt;漏洞分析: 发现目标系统和应用中存在的漏洞&lt;/li&gt;
&lt;li&gt;漏洞利用: 对发现的漏洞使用攻击向量进行攻击&lt;/li&gt;
&lt;li&gt;后渗透: 建立立足点，进行持续维权以及内网渗透，获取指定的渗透目标数据、权限等。清理。&lt;/li&gt;
&lt;li&gt;报告: 输出渗透测试报告&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;渗透测试执行流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;目标确认: 渗透约束条件和渗透最终目标&lt;/li&gt;
&lt;li&gt;信息收集: 收集目标范围内的各类信息&lt;/li&gt;
&lt;li&gt;漏洞发现: 在信息收集的基础上，发现目标应用系统的漏洞&lt;/li&gt;
&lt;li&gt;漏洞利用: 对发现的目标漏洞进行利用，通过漏洞利用获取目标系统权限&lt;/li&gt;
&lt;li&gt;权限维持，内网渗透: 进入目标系统，进行横向拓展，向渗透目标靠近&lt;/li&gt;
&lt;li&gt;目标获取，清理痕迹: 获取渗透目标权限或数据，回传数据，清理痕迹&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;渗透测试的本质是信息收集&lt;/h2&gt;
&lt;h2&gt;收集的信息越多，意味着攻击面越广&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;当渗透没有思路的时候，再重新回到信息收集       ---- Micropoor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;四个维度的漏洞发现：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;传统漏洞&lt;/li&gt;
&lt;li&gt;利用通用漏洞&lt;/li&gt;
&lt;li&gt;弱口令等目标脆弱点&lt;/li&gt;
&lt;li&gt;代码审计&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;UDF提权&lt;/h2&gt;
&lt;p&gt;Userdefined function 用户自定义函数，Mysql为用户提供的一个扩展功能的接口。用户可以通过编写代码的方式编译成.so .dll文件，使用自定义的函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UDF提权的条件&lt;/strong&gt;
* 需要Mysql高于5.1的版本
* .so  .dll文件必须放在mysql的plugin目录下&lt;/p&gt;
&lt;h2&gt;redis提权&lt;/h2&gt;
&lt;p&gt;利用其服务端的程序的配置问题或漏洞来进行提权&lt;/p&gt;
&lt;h2&gt;获取shell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;正向shell -&amp;gt; 客户端连接服务器端，客户端想要获取服务器端的shell&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反向shell -&amp;gt; 客户端连接服务器端，服务器端想要获得客户端的shell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库提权：udf提权，mof提权&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;shell提权&lt;/li&gt;
&lt;li&gt;SQL注入获取shell&lt;/li&gt;
&lt;li&gt;XSS获取shell&lt;/li&gt;
&lt;li&gt;弱口令获取服务器权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;业务逻辑漏洞&lt;/h2&gt;
&lt;p&gt;由于程序逻辑不严谨或逻辑太复杂，导致一些逻辑分支不能正常处理或处理错误导致的漏洞。
与传统的漏洞相比，业务逻辑漏洞不易发现，挖掘思路不统一；不易防护，没有明确的防护方案
&lt;strong&gt;业务逻辑漏洞存在的可能场景：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户注册场景&lt;/li&gt;
&lt;li&gt;登录场景&lt;/li&gt;
&lt;li&gt;支付场景&lt;/li&gt;
&lt;li&gt;修改资料场景&lt;/li&gt;
&lt;li&gt;信息交互场景&lt;/li&gt;
&lt;li&gt;绑定手机场景&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;权限控制&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;越权：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平行越权访问漏洞，指的是权限平级的两个用户之间的越权访问；&lt;/li&gt;
&lt;li&gt;垂直越权访问漏洞，指的是权限不等的两个用户之间的越权访问。&lt;/li&gt;
&lt;li&gt;接口控制：特殊接口，没有做访问权限的控制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;什么是接口控制？&lt;/strong&gt;&lt;/p&gt;
&lt;h5&gt;在博客论坛中，一个正常的普通用户A使用官方提供的API接口构造链接，用户B通过点击该链接后进行发送或转发用户A指定的内容。&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;平行越权漏洞的防护：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加访问与操作对象的用户属性，在对目标对象进行访问与操作时，服务端检验会话与对象的用户属性，在校验通过后才能执行读取和操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;垂直越权漏洞的防护：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有访问采用默认拒绝机制，采取基于角色访问控制，对于各个功能的访问，规定不同角色拥有不同的访问权限，当用户在使用该功能时，系统要校对用户的权限与访问控制机制是否与规定相同，通过校验者才能使用，否则拒绝使用该功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;传统的漏洞可以从哪三个方面进行防护？&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;从源头上解决，防止漏洞的产生；&lt;/li&gt;
&lt;li&gt;通过代码过滤，&lt;/li&gt;
&lt;li&gt;通过第三方服务介入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;让事物以迥于初衷的方式运作&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;漏洞复现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;漏洞复现是对某一漏洞进行还原验证的过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;漏洞复现的意义？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一，可以认识到相关的系统知识，比如命令行、系统配置文件等等；&lt;/li&gt;
&lt;li&gt;第二，对漏洞复现的认知，这个漏洞是如何产生的，是哪里的代码逻辑出现了问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;漏洞复现的三个步骤：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;搭建环境-》实现漏洞-》原理解析&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;通用漏洞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;企业及互联网中常用的操作系统，系统组件，重要的框架以及应用中的安全漏洞。
通用漏洞是渗透测试流程中漏洞发现部分关注的漏洞方向之一，是学习漏洞挖掘知识的重要来源。&lt;/li&gt;
&lt;li&gt;PoC指一段漏洞证明的代码&lt;/li&gt;
&lt;li&gt;通用漏洞在渗透测试过程中占有很重要的分量，通过学习通用漏洞，既可以丰富个人的攻击宽度，也可以学习相关漏洞知识和挖掘漏洞的思路。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;代码审计原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;代码审计是一种以发现程序错误，安全漏洞和违反程序规范为目标的源代码分析。&lt;/li&gt;
&lt;li&gt;代码审计是漏洞挖掘的重要途径。&lt;/li&gt;
&lt;li&gt;代码审计还是企业安全建设SDL流程中的一个环节。&lt;/li&gt;
&lt;li&gt;代码审计（白盒），能够覆盖更全面的安全问题。&lt;/li&gt;
&lt;li&gt;与黑盒测试相比，当有源代码时（代码审计）在寻找代码入口和程序执行路径等漏洞挖掘点时所做的猜测性工作会大大减少。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;代码审计的技能要求：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对编程的掌握（能看懂代码的逻辑）&lt;/li&gt;
&lt;li&gt;对漏洞形成原理的理解&lt;/li&gt;
&lt;li&gt;系统，中间件，框架等的熟悉程度&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;代码审计思路：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;关键词搜索：依赖漏洞关联的函数，搜索函数名称并追踪输入&lt;/li&gt;
&lt;li&gt;框架类基于功能审计：MVC框架功能和代码路由关系，直接定位业务逻辑代码&lt;/li&gt;
&lt;li&gt;通读代码：研究其代码构建逻辑&lt;/li&gt;
&lt;li&gt;敏感函数回溯&lt;/li&gt;
&lt;li&gt;通读全文&lt;/li&gt;
&lt;li&gt;功能点定向审计&lt;/li&gt;
&lt;/ul&gt;</content><category term="Web"></category><category term="WebSec"></category><category term="PWN"></category></entry><entry><title>XSS攻击</title><link href="https://leelongcrazy.github.io/xssgong-ji.html" rel="alternate"></link><published>2021-03-14T18:00:00+08:00</published><updated>2021-03-14T18:00:00+08:00</updated><author><name>leelongcrazy</name></author><id>tag:leelongcrazy.github.io,2021-03-14:/xssgong-ji.html</id><summary type="html">&lt;p&gt;XSS攻击实战&lt;/p&gt;</summary><content type="html">&lt;h1&gt;XSS攻击&lt;/h1&gt;
&lt;h3&gt;反射型XSS&lt;/h3&gt;
&lt;p&gt;请求代码出现在URL中，作为输入提交到服务器，服务器解析后响应，响应内容中出现这段XSS代码，最后在浏览器解析执行，达到攻击效果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// 常用攻击payload&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39; onclick=alert(1)//&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;//&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;存储型XSS&lt;/h3&gt;
&lt;h3&gt;DOM型XSS&lt;/h3&gt;</content><category term="Web"></category><category term="WebSec"></category><category term="PWN"></category></entry><entry><title>VUE学习笔记</title><link href="https://leelongcrazy.github.io/vuexue-xi-bi-ji.html" rel="alternate"></link><published>2020-12-23T17:00:00+08:00</published><updated>2020-12-23T17:00:00+08:00</updated><author><name>leelongcrazy</name></author><id>tag:leelongcrazy.github.io,2020-12-23:/vuexue-xi-bi-ji.html</id><summary type="html">&lt;p&gt;VUE学习笔记&lt;/p&gt;</summary><content type="html">&lt;h1&gt;VUE学习笔记&lt;/h1&gt;
&lt;h2&gt;Vue 对象&lt;/h2&gt;
&lt;h5&gt;new Vue()产生实例时传入的常用的选项&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;el: 通过CSS选择器或者HTMLElement实例的方式，提供一个在页面上已存在的DOM元素作为Vue实例的挂在目标。&lt;/li&gt;
&lt;li&gt;data：用于定义属性&lt;/li&gt;
&lt;li&gt;methods：用于定义函数。Vue实例的事件，用于事件绑定&lt;/li&gt;
&lt;li&gt;template : 字符串模板，将会替换挂载的元素&lt;/li&gt;
&lt;li&gt;render : 字符串模板的代替方案&lt;/li&gt;
&lt;li&gt;props : 用于接收来自父组件的数据&lt;/li&gt;
&lt;li&gt;computed : 计算属性，用于简化模板的复杂数据计算&lt;/li&gt;
&lt;li&gt;watch : 观察Vue实例变化的一个表达式或计算属性函数&lt;/li&gt;
&lt;li&gt;directives : 自定义命令&lt;/li&gt;
&lt;li&gt;filters : 过滤器&lt;/li&gt;
&lt;li&gt;components : 组件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// ...一些选项&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 获取 data&lt;/span&gt;
&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 获取 props&lt;/span&gt;
&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 获取挂载元素&lt;/span&gt;
&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 获取 Vue 实例的初始选项&lt;/span&gt;
&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$parent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 获取父实例&lt;/span&gt;
&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 获取根实例&lt;/span&gt;
&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 获取当前实例的直接子组件&lt;/span&gt;
&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$refs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 获取持有注册过 ref 特性 的所有 DOM 元素和组件实例&lt;/span&gt;

&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$watch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 观察 Vue 实例变化的一个表达式或计算属性函数&lt;/span&gt;
&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新&lt;/span&gt;
&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$delete&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 删除对象的属性。如果对象是响应式的，确保删除能触发更新视图&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;模板语法&lt;/h2&gt;
&lt;h3&gt;插值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;文本 {{ }}&lt;/li&gt;
&lt;li&gt;html: 使用v-html 指令用于输出HTML&lt;/li&gt;
&lt;li&gt;属性：使用v-bind 指令用于绑定HTML属性中的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;表达式： 支持JS表达式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;指令： &lt;/li&gt;
&lt;li&gt;v-if&lt;/li&gt;
&lt;li&gt;v-on     它用于监听 DOM 事件&lt;/li&gt;
&lt;li&gt;v-for&lt;/li&gt;
&lt;li&gt;v-bind   属性值绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;用户输入 ：v-model 指令来实现双向数据绑定&lt;/h3&gt;
&lt;h3&gt;过滤器：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;{{ message | filterA | filterB }} // &lt;/li&gt;
&lt;li&gt;{{ message | filterA('arg1', arg2) }}  过滤器是JavaScript函数，可以接受参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;缩写&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;v-bind的缩写：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;html
    &amp;lt;!-- 完整语法 --&amp;gt;
    &amp;lt;a v-bind:href="url"&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;!-- 缩写 --&amp;gt;
    &amp;lt;a :href="url"&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;v-on 的缩写：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;html
    &amp;lt;!-- 完整语法 --&amp;gt;
    &amp;lt;a v-on:click="doSomething"&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;!-- 缩写 --&amp;gt;
    &amp;lt;a @click="doSomething"&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;条件与循环&lt;/h2&gt;
&lt;h3&gt;条件语句&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;v-if&lt;/li&gt;
&lt;li&gt;v-else&lt;/li&gt;
&lt;li&gt;v-else-if&lt;/li&gt;
&lt;li&gt;v-show: 可以根据条件展示元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;循环语句&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;v-for&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第一个参数为数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二个参数为键名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三个参数为索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;html
    &amp;lt;div id="app"&amp;gt;
      &amp;lt;ul&amp;gt;
        &amp;lt;li v-for="(value, key, index) in object"&amp;gt;
         {{ index }}. {{ key }} : {{ value }}
        &amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;计算属性&lt;/h2&gt;
&lt;p&gt;计算属性关键词：computed，在处理一些复杂逻辑时是很有用的。&lt;/p&gt;
&lt;p&gt;利用计算属性实现字符串的翻转：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;原始字符串: {{ message }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;计算后反转字符串: {{ reversedMessage }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;vm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#app&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Runoob!&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 计算属性的 getter&lt;/span&gt;
    &lt;span class="nx"&gt;reversedMessage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// `this` 指向 vm 实例&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;computed vs methods&lt;/h6&gt;
&lt;p&gt;可以用methods来替代computed，效果都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。&lt;/p&gt;
&lt;h2&gt;监听属性&lt;/h2&gt;
&lt;h3&gt;watch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;目的是响应数据的变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;深度监听：deep: true &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;样式绑定&lt;/h2&gt;
&lt;h3&gt;class属性绑定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;html 
  &amp;lt;div v-bind:class="{ 'active': isActive }"&amp;gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事件处理器&lt;/h2&gt;
&lt;p&gt;v-on&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 同上 --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;v-on:keyup&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;enter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 缩写语法 --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;keyup&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;enter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;事件修饰符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.stop&lt;/code&gt; - 阻止冒泡&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.prevent&lt;/code&gt; - 阻止默认事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.capture&lt;/code&gt; - 阻止捕获&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.self&lt;/code&gt; - 只监听触发该元素的事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.once&lt;/code&gt; - 只触发一次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.left&lt;/code&gt; - 左键事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.right&lt;/code&gt; - 右键事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.middle&lt;/code&gt; - 中间滚轮事件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;监听键盘事件时添加按键修饰符，以下是按键别名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.enter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.tab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.delete&lt;/code&gt; (捕获 "删除" 和 "退格" 键)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.up&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.down&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.ctrl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.alt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.shift&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.meta&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;表单的处理&lt;/h2&gt;
&lt;h3&gt;v-model&lt;/h3&gt;
&lt;p&gt;修饰符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.lazy&lt;/code&gt;  输入框在change事件中变化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.number&lt;/code&gt;  将输入值转换为Number类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.trim&lt;/code&gt;  自动过滤输入的首尾空格&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;VUE 组件&lt;/h2&gt;
&lt;p&gt;组件（component）是VUE.js最强大的功能之一。&lt;/p&gt;
&lt;p&gt;组件可以扩展HTML元素，封装可重用的代码。&lt;/p&gt;
&lt;p&gt;注册全局组件语法格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Vue.component(tagName, options)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;tagName为组件名，options为配置选项。&lt;/p&gt;
&lt;p&gt;组件的调用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分类：全局组件和局部组件&lt;/p&gt;
&lt;h3&gt;自定义事件&lt;/h3&gt;
&lt;p&gt;组件中的 data 不是一个对象，而是一个函数，这样的好处就是每个实例可以维护一份被返回对象的独立的拷贝，如果 data 是一个对象则会影响到其他实例&lt;/p&gt;
&lt;h3&gt;自定义指令&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;页面载入时&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;元素自动获取焦点&lt;/span&gt;&lt;span class="err"&gt;：&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// 注册一个全局自定义指令 v-focus&lt;/span&gt;
&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;directive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;focus&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// 当绑定元素插入到 DOM 中。&lt;/span&gt;
  &lt;span class="nx"&gt;inserted&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 聚焦元素&lt;/span&gt;
    &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// 创建根实例&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#app&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;消息传递&lt;/h2&gt;
&lt;p&gt;父组件可以使用 props 把数据传给子组件&lt;/p&gt;
&lt;p&gt;子组件可以使用 $emit 触发父组件的自定义事件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//触发当前实例上的事件&lt;/span&gt;

&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//监听event事件后运行 fn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;VUE 的过渡和动画&lt;/h2&gt;
&lt;p&gt;实现过渡效果的组件：transition&lt;/p&gt;
&lt;h2&gt;Vue.js Ajax(axios)&lt;/h2&gt;
&lt;p&gt;Vue.js 2.0 版本推荐使用 axios 来完成 ajax 请求。&lt;/p&gt;
&lt;p&gt;Axios 是一个基于 Promise 的 HTTP 库，可以用在浏览器和 node.js 中。&lt;/p&gt;
&lt;p&gt;Github开源地址： https://github.com/axios/axios&lt;/p&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://cdn.staticfile.org/axios/0.18.0/axios.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Web"></category><category term="VUE"></category></entry></feed>